open Parser
open Lexer
open Emit
open Mkmap

let print_correspond label pc =
    print_string (label ^ " " ^ pc ^ "\n")

let print_label_pc = true

let print_pc_init n =
    (if ( n land (1 lsl 19) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 18) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 17) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 16) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 15) = 0 ) then print_int 0 else print_int 1);
    (if ( n land (1 lsl 14) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 13) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 12) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 11) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 10) = 0 ) then print_int 0 else print_int 1);
    (if ( n land (1 lsl 9) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 8) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 7) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 6) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 5) = 0 ) then print_int 0 else print_int 1);
    (if ( n land (1 lsl 4) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 3) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 2) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 1) = 0 ) then print_int 0 else print_int 1); 
    (if ( n land (1 lsl 0) = 0 ) then print_int 0 else print_int 1)

let lexbuf outchan l =
    let map_init = Labels.empty in
    let tree = (Parser.exp Lexer.token l) in
    let map = Mkmap.f tree map_init in 
    let pc_init = ((int_of_string(Labels.find "min_caml_start" map))) in
    if (print_label_pc) then (
        Labels.iter print_correspond map
    )
    else (
        print_pc_init (pc_init);
        print_string "00000";
        print_string "1101111\n";
        Emit.f tree map;
        print_string "11111111111111111111111111111111"
    )

(* let string s = lexbuf stdout (Lexing.from_string s) *)

let file f =
    let inchan = open_in (f ^ ".asm") in
    let outchan = open_out (f ^ ".bin") in
    try
        lexbuf outchan (Lexing.from_channel inchan);
        close_in inchan;
        close_out outchan;
    with e -> (close_in inchan; close_out outchan; raise e)

let () = 
    let file_name = Sys.argv.(1) in
    file file_name